import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.6.1'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'junit:junit:4.11'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    name project.name
    description project.pomDescription
    url project.repositoryUrl
    inceptionYear pomInceptionYear

    scm {
        connection 'scm:git:git@gitlab.com:tastapod/jgotesting.git'
        developerConnection 'scm:git:git@gitlab.com:tastapod/jgotesting.git'
        url 'https://gitlab.com/tastapod/jgotesting'
    }

    licenses {
        license {
            name pomLicenseName
            url pomLicenseUrl
        }
    }

    developers {
        developer {
            id 'dn'
            name 'Dan North'
            email 'dan@jgotesting.org'
        }
        developer {
            id 'aa'
            name 'Andres Almiray'
            email 'andres@jgotesting.org'
        }
        developer {
            id 'ro'
            name 'Rickard Ã–berg'
            email 'rickardoberg@gmail.com'
        }
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Build-Date': buildDate,
                'Build-Time': buildTime,
                'Build-Revision': versioning.info.commit,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': 'jgotesting.org',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'jgotesting.org'
        )
    }

    metaInf {
        from rootProject.file('.')
        include 'LICENSE.*'
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            // Copied wholesale from https://github.com/griffon/griffon/blob/development/gradle/publish.gradle
            pom.withXml {
                // all dependencies should use the default scope (compile) but
                // Gradle insists in using runtime as default
                asNode().dependencies.dependency.each { dep ->
                    if (dep.scope.text() == 'runtime') {
                        dep.remove(dep.scope)
                    }
                }
                asNode().children().last() + pomConfig
                asNode().appendNode('description', project.pomDescription)
            }
        }
    }
}
